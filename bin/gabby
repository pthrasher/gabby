#!/usr/bin/env node

/**
 * Dependencies
 */

var Gabby         = require('../'),
    fs            = require('fs')
    fspath        = require('path'),
    child_process = require('child_process'),
    program       = require('commander');


/**
 * CLI Arguments
 */

program
  .version(
    JSON.parse(fs.readFileSync(__dirname + '/../package.json')).version
  )
  .option('-d, --debug',
    'Debug mode. Enable this for instant preview of filechanges.'
  );

program
  .command('build [path]')
  .description('Build project at [path].')
  .action(build);

program
  .command('init [path]')
  .description('Initialize new project at [path].')
  .action(initialize);

program
  .command('listen [path]')
  .description('Start HTTP static server for project at [path].')
  .option('-p, --port [port]', 'Specify a port to listen on.', 'port')
  .action(listen);

program.parse(process.argv);


/**
 * Initialize a new project with given `path`
 *
 * @param String path
 * @api private
 */

function initialize(path) {
  var website = new Gabby(path, {
    'debug': program.debug,
    'log level': (program.debug) ? 4 : 3
  });
  website.createProjectSkeleton();
};


/**
 * Build the project at <path>
 *
 * @param String path
 * @api private
 */

function build(path) {
  var website = new Gabby(path, {
    'debug': program.debug,
    'log level': (program.debug) ? 4 : 3
  });
  website.build();
};


/**
 * Setup a static HTTP server
 *
 * @param String path
 * @param Map options
 * @api private
 */

function listen(path, options) {
  var website = new Gabby(path, {
    'debug': program.debug,
    'log level': (program.debug) ? 4 : 3
  });
  website.build();
  var connect = require('connect');
  var server = connect();
  var static = connect.middleware.static((path || './') + '/generated', {
    maxAge: (program.debug) ? 0 : 86400000
  });
  server.use(connect.middleware.compress());
  if (program.debug) {
    server.use(connect.middleware.staticCache());
  }
  server
    .use(function(req, res, next) {
      var ext = req.url.match(/\.([^\.]+)$/);
      if (ext && ext[1] === 'html') {
        return notFound(req, res, next);
      }
      if (req.url !== '/' && !ext) {
        var queryIdx = req.url.indexOf('?');
        if (queryIdx === -1) {
          req.url = req.url + '.html';
        }
        else {
          req.url = req.url.substr(0, queryIdx) + '.html'
                  + req.url.substr(queryIdx);
        }
      }
      static(req, res, next);
    })
    .use(connect.middleware.static((path || './') + '/generated', {
      maxAge: (program.debug) ? 0 : 86400000
    }))
    .listen(isNaN(options.port) ? 3001 : options.port);
  // 404 Page
  var notFound = function(req, res, next) {
    var body = '404 Not Found';
    res.writeHead(404, {
      'Content-Type': 'text/html',
      'Content-Length': body.length
    });
    res.end(body);
  };
  // Listen for changes
  if (program.debug) {
    var md5;
    setInterval(function() {
      child_process.exec(
        'find ' + fspath.resolve(path) + ' -ls -print0 | md5',
        function(err, stdout, stderr) {
          if (err) throw err;
            if (md5 !== stdout) {
              if (md5) {
                website.build();
              }
              md5 = stdout;
            }
        }
      );
    }, 1000);
  }
};
